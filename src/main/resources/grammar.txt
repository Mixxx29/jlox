program              →  declaration* EOF
declaration          →  classDeclaration | variableDeclaration | functionDeclaration | statement
classDeclaration     →  "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}"
variableDeclaration  →  "var" IDENTIFIER ( "=" expression )? ";"
functionDeclaration  →  "fun" function
function             →  "class"? IDENTIFIER "(" parameters? ")" block
parameters           →  IDENTIFIER ( "," IDENTIFIER )*
statement            →  expressionStatement
                     |  block
                     |  ifStatement
                     |  whileStatement
                     |  forStatement
                     |  printStatement
                     |  breakStatement
                     |  continueStatement
                     |  returnStatement

block                →  "{" declaration* "}"
ifStatement          →  "if" "(" expression ")" statement ( "else" statement )?
whileStatement       →  "while" "(" expression ")" statement
forStatement         →  "for" "(" (variableDeclaration | expressionStatement | ";") expression? ";" expression? ";" ")" statement
printStatement       →  "print" expression ";"
breakStatement       →  "break" ";"
continueStatement    →  "continue" ";"
returnStatement      →  "return" expression? ";"
expressionStatement  →  expression ";"
expression           →  assignment
assignment           →  ( call "." )? IDENTIFIER "=" assignment | logicOr | lambdaExpression
lambdaExpression     →  "lambda" "(" parameters? ")" "->" statement
logicOr              →  logicAnd ( "or" logicAnd )*
logicAnd             →  equality ( "and" equality )*
equality             →  comparison ( ( "!=" | "==" ) comparison )*
comparison           →  term ( ( ">" | ">=" | "<" | "<=" ) term )*
term                 →  factor ( ( "-" | "+" ) factor )*
factor               →  unary ( ( "/" | "*" ) unary )*
unary                →  ( "!" | "-" ) unary | call
call                 →  primary ( "(" arguments? ")" | "." IDENTIFIER )*
arguments            →  expression ( "," expression )*
primary              →  IDENTIFIER
                     |  NUMBER
                     |  STRING
                     |  "true"
                     |  "false"
                     |  "nil"
                     |  "(" expression ")"
                     |  "super" "." IDENTIFIER